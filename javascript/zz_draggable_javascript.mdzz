# Draggable Javascript

	function makeDraggable(state, el, options) {
		function start(event) {
			if (event.button !== 0) return; // left button only
			event.stopPropagation(); // for nested draggables
			let {x, y} = state.eventToCoordinates(event);
			state.dragging = {dx: state.pos.x - x, dy: state.pos.y - y};
			el.setPointerCapture(event.pointerId);
			el.style.userSelect = 'none'; // if there's text
			el.style.webkitUserSelect = 'none'; // safari
		}

		function end(event) {
			state.dragging = null;
			el.style.userSelect = ''; // if there's text
			el.style.webkitUserSelect = ''; // safari
		}

		function move(event) {
			if (!state.dragging) return;
			event.stopPropagation(); // for nested draggables
			let {x, y} = state.eventToCoordinates(event);
			state.pos = {x: x + state.dragging.dx, y: y + state.dragging.dy};
		}
			
		el.addEventListener('pointerdown', start);
		el.addEventListener('pointerup', end);
		el.addEventListener('pointercancel', end);
		el.addEventListener('pointermove', move)
		el.addEventListener('touchstart', (e) => e.preventDefault());
		el.addEventListener('dragstart', (e) => e.preventDefault());
	}

<figure id="diagram-introduction"><svg viewBox="-220 -75 440 150"><rect x="-220" y="-75" width="100%" height="100%" fill="url(#pattern-dots)"></rect><g class="" transform="translate(-135.3086338043213, -8.148147702217102)" style="cursor: grab;">
<circle stroke="black" stroke-width="0.5" r="30" style="fill: rgb(191, 64, 64); --darkreader-inline-stroke: #e8e6e3; --darkreader-inline-fill: #c55353;" data-darkreader-inline-stroke="" data-darkreader-inline-fill=""></circle>
<g font-size="14" text-anchor="middle" fill="white" data-darkreader-inline-fill="" style="--darkreader-inline-fill: #181a1b;">
<text dy="0.0em">Drag</text>
<text dy="1.0em">me</text>
</g></g></svg><figcaption>Drag the circle with mouse or touch</figcaption>
</figure>
	  
<script>
function makeDraggable(state, el, options) {
function start(event) {
if (event.button !== 0) return; // left button only
event.stopPropagation(); // for nested draggables
let {x, y} = state.eventToCoordinates(event);
state.dragging = {dx: state.pos.x - x, dy: state.pos.y - y};
el.setPointerCapture(event.pointerId);
el.style.userSelect = 'none'; // if there's text
el.style.webkitUserSelect = 'none'; // safari
}
function end(event) {
state.dragging = null;
el.style.userSelect = ''; // if there's text
el.style.webkitUserSelect = ''; // safari
}
function move(event) {
if (!state.dragging) return;
event.stopPropagation(); // for nested draggables
let {x, y} = state.eventToCoordinates(event);
state.pos = {x: x + state.dragging.dx, y: y + state.dragging.dy};
}
el.addEventListener('pointerdown', start);
el.addEventListener('pointerup', end);
el.addEventListener('pointercancel', end);
el.addEventListener('pointermove', move)
el.addEventListener('touchstart', (e) => e.preventDefault());
el.addEventListener('dragstart', (e) => e.preventDefault());
}
let state = {};
function onStart1() {
const dragBox = document.getElementById("diagram-introduction");
makeDraggable(state, dragBox, {});
}
if (document.readyState !== 'loading') {
onStart1();
} else {
document.addEventListener('DOMContentLoaded', onStart1);
}
</script>


## Source

- [Draggable objects - redblobgames](https://www.redblobgames.com/making-of/draggable/)

